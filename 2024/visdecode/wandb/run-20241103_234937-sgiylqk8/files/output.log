
[36m[1mEpoch :[39m[22m 0 [32m[1m | Loss :[39m[22m 5.4127116203308105
















 95%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–Œ| 19/20 [00:37<00:01,  1.95s/it]
[35m|[39m JSON to Vega conversion error rate: [31m100.0[39m [31m%[39m [35m|
[35m[1m----------------------------------------------------- EVALUATION -------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mY-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-NAME[39m[22m : nan [35m|[39m [36m[1mY-NAME[39m[22m : nan [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 1.0 [35m|
[35m[1m------------------------------------------------------------------------------------------------------------------------
[32m[1mcircle|quantitative|Mode Age|quantitative|Alcohol Consumption
[31m# Plot the scatterplot for Mode Age and Alcohol Consumption<0x0A><0x0A>sns.set(style="ticks", color_codes=True)<0x0A><0x0A>g = sns.lmplot(x="Mode Age", y="Alcohol Consumption", data=df,<0x0A>           fit_reg=False, height=7, aspect=1.5)<0x0A><0x0A>g.set(xlim=(0, None), ylim=(0, None))<0x0A><0x0A>g.set(xlabel='Mode Age', ylabel='Alcohol Consumption')<0x0A>g.set(yticks=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 20/20 [00:39<00:00,  1.99s/it]
/mnt/disk2/msinnona/miniconda3/envs/martin/lib/python3.12/site-packages/numpy/core/fromnumeric.py:3504: RuntimeWarning: Mean of empty slice.
  return _methods._mean(a, axis=axis, dtype=dtype,
/mnt/disk2/msinnona/miniconda3/envs/martin/lib/python3.12/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)


















100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 20/20 [00:43<00:00,  2.17s/it]
[31mg = sns.catplot(x="Water Usage", y="CO2 Emissions", data=df, kind="bar", height=8, aspect=1.5)<0x0A>g.despine(left=True)<0x0A>g.set_axis_labels("Water Usage", "CO2 Emissions")<0x0A>g.set_xticklabels(rotation=90)<0x0A>g.set_ylabels("")<0x0A>plt.show()
[32m[1mbar|nominal||quantitative|Kurtosis And Skewness Of Annual Corporate Profit Margins
[31m# Plot the bar graph<0x0A>sns.set(context="notebook", style="ticks", color_codes=True)<0x0A><0x0A># Plot the bar graph<0x0A>sns.set(context="notebook", style="ticks", color_codes=True)<0x0A><0x0A># Plot the bar graph<0x0A>sns.barplot(x=data_frame['Name'], y=data_frame['Profit Margins'])<0x0A><0x0A># Plot the bar graph<0x0A>sns.despine()<0x0A>plt.xticks(rotation=90)<0x0A>plt.ylabel('Kurtosis And Skewness Of Annual Corporate Profit Margins')<0x0A>plt.yticks(rotation=0)<0x0A><0x0A># Plot the bar graph<0x0A>sns.despine()<0x0A>plt.savefig('bar_bar_graph.png')
[32m[1mbar|nominal||quantitative|
[31m# 1. <0x0A># 2. <0x0A># 3. <0x0A># 4. <0x0A># 5. <0x0A># 6. <0x0A># 7. <0x0A># 8. <0x0A># 9. <0x0A># 10. <0x0A># 11. <0x0A># 12. <0x0A># 13. <0x0A># 14. <0x0A># 15. <0x0A># 16. <0x0A># 17. <0x0A># 18. <0x0A># 19. <0x0A># 20. <0x0A># 21. <0x0A># 22. <0x0A># 23. <0x0A># 24. <0x0A># 25. <0x0A># 26. <0x0A># 27. <0x0A># 28. <0x0A># 29. <0x0A># 30.
[32m[1mbar|nominal|Median Household Income Indexed By Regional Inflation Rates|quantitative|Bond Yield
[31m# Plotting the graph<0x0A><0x0A>sns.set(style="ticks")<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph
[32m[1mbar|nominal|Cost|quantitative|Quantile Regression Estimates Of Salary By Experience Level
[31mfig = plt.figure(figsize=(6,6))<0x0A>ax = fig.add_subplot(111)<0x0A><0x0A># Create a bar plot<0x0A>sns.barplot(x='Cost', y='Quantile Regression Estimates Of Salary By Experience Level', data=df_salary_exp)<0x0A><0x0A># Add a title and axis labels<0x0A>ax.set_ylabel('Quantile Regression Estimates Of Salary By Experience Level')<0x0A>ax.set_xlabel('Cost')<0x0A><0x0A># Add a title and axis labels<0x0A>ax.set_ylabel('Quantile Regression Estimates Of Salary By Experience Level')<0x0A><0x0A># Add a legend<0x0A>ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)<0x0A><0x0A># Display the plot<0x0A>plt.show()
[32m[1mcircle|quantitative|Height|quantitative|
[31mheights.plot(kind='scatter', x='Height', y='Height', figsize=(10,10), color='steelblue', s=100)
[32m[1mcircle|quantitative||quantitative|
[31m%matplotlib inline<0x0A><0x0A>import matplotlib.pyplot as plt<0x0A><0x0A>fig = plt.figure(figsize=(8,10))<0x0A>ax = fig.add_subplot(111)<0x0A><0x0A>ax.scatter(x, y, s=100)<0x0A><0x0A>ax.set_xlim(0, 1000)<0x0A>ax.set_ylim(0, 400)<0x0A><0x0A>plt.show()
[32m[1mline|temporal|Smoking Rate|quantitative|Simulation Results Of Variable Interest Rates On Bond Prices
[31m## Plotting the graph<0x0A><0x0A>fig, ax = plt.subplots(figsize=(10, 10))<0x0A><0x0A>ax.plot(smoking_rates, results_bond_prices)<0x0A>ax.set_xlabel('Smoking Rate')<0x0A>ax.set_ylabel('Simulation Results Of Variable Interest Rates On Bond Prices')<0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['top'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False)<0x0A><0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A>ax.spines['bottom'].set
[32m[1mline|temporal|Adjusted R Squared For Linear Regression Model With Heteroscedasticity|quantitative|CO2 Emissions
[31m# Plot the Co2 emissions<0x0A><0x0A>sns.set(style="ticks")<0x0A><0x0A># Compute the co2 emissions<0x0A>co2_co2 = pd.DataFrame(<0x0A>    [<0x0A>        (<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>
[32m[1mline|temporal|Time|quantitative|
[31msns.set(context="notebook", style="ticks", palette="muted")<0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A>
[32m[1mcircle|quantitative|Predictive Accuracy Of Seasonal Demand Forecasting Models|quantitative|Heterogeneity In Clinical Trial Populations By Gender And Age
[31m# Create a scatter plot<0x0A>ggplot(aes(x=variable, y=variable, colour=variable)) +<0x0A>    geom_point() +<0x0A>    labs(x="Predictive Accuracy Of Seasonal Demand Forecasting Models", y="Heterogeneity In Clinical Trial Populations By Generations By Gender And Age") +<0x0A>    scale_x_date() +<0x0A>    scale_y_jitter() +<0x0A>    theme_minimal()
[32m[1mline|temporal|Distance|quantitative|Probability Density Function Of Age Distribution In Population Survey
[31m# Plot the Distance vs Probability Density Function OYAg Distribution in Population Survey<0x0A><0x0A>sns.set(context="talk", style="ticks", font_scale=1.5)<0x0A><0x0A>fig, ax = plt.subplots(figsize=(10, 10))<0x0A><0x0A>ax.spines['top'].set_visible(False)<0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False)<0x0A><0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False
[32m[1mcircle|quantitative|Growth Rate|quantitative|GDP
[31m# Plot the scatter plot<0x0A><0x0A># Set up the matplotlib figure<0x0A>f, ax = plt.subplots(figsize=(10, 10))<0x0A><0x0A># Generate a scatter plot of total GDP vs Growth Rate<0x0A>scatter_plot = scatter_plot.plot(x='Growth Rate', y='GDP', kind='scatter', ax=ax, color='#1f77b4', s=75)<0x0A><0x0A># Set up the x-axis label<0x0A>ax.set_xlabel('Growth Rate')<0x0A>ax.set_ylabel('GDP')<0x0A><0x0A># Set up the legend<0x0A>ax.legend(handles=[scatter_plot])<0x0A><0x0A># Set up the y-axis<0x0A>ax.set_ylim(0, 80)<0x0A><0x0A># Set up the legend<0x0A>ax.legend(
[32m[1mline|temporal|Mental Health|quantitative|Import Volume
[31mimport matplotlib.pyplot as plt<0x0A>import seaborn as sns<0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A>
[32m[1mcircle|quantitative|Assessment Of Healthcare Utilization Rates By Demographic Groups|quantitative|
[31m%matplotlib inline<0x0A>import matplotlib.pyplot as plt<0x0A>import pandas as pd<0x0A>import numpy as np<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import
[32m[1mbar|nominal||quantitative|Poverty Rate
[31mpoverty_barplot(df, 'Poverty Rate', 'USA')
[32m[1mline|temporal|Impact Of Temperature Variability On Crop Yield Statistics|quantitative|Detrended Analysis Of Yearly Weather Anomalies In Temperature Data
[31mfig = plt.figure(figsize=(10,10))<0x0A>ax = fig.add_subplot(111)<0x0A><0x0A># Plot the data<0x0A>ax.plot(x, y, lw=2, color='#003366', alpha=0.7)<0x0A>ax.set_xlabel('Impact Of Temperature Variability On Crop Yield Statistics')<0x0A>ax.set_ylabel('Dtrended Analysis Of Yearly Weather In Normalies In Temperature Data')<0x0A>ax.set_ylim(0, 6000)<0x0A><0x0A># Plot the data<0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['top'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A>ax.spin
[32m[1mline|temporal||quantitative|
[31mfig, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A>ax.plot(x,y)<0x0A>ax.set_ylim(0,5000)<0x0A><0x0A>ax.set_xlim(1,1840)<0x0A><0x0A>ax.set_ylim(0,5000)<0x0A><0x0A>ax.set_xticks(np.arange(1825,1840,1))<0x0A>ax.set_yticks(np.arange(0,5000,1))<0x0A><0x0A>ax.set_xticklabels(x)<0x0A>ax.set_yticklabels(y)<0x0A><0x0A>ax.grid(True)<0x0A><0x0A>plt.show()
[32m[1mcircle|quantitative|Literacy Rate|quantitative|Export Volume
[31m# Plot the graph<0x0A>sns.set(context="notebook", style="ticks", font_scale=1.5)<0x0A><0x0A># Draw scatter plot<0x0A>sns.lmplot(x="Literacy Rate", y="Epoch Volume", data=df,<0x0A>           fit_reg=False, height=7, aspect=1.5,<0x0A>           data=df,<0x0A>           fit_reg=False,<0x0A>           size=8,<0x0A>           scatter_kws={"s": 100})<0x0A><0x0A># Label axes<0x0A>plt.xlabel("Literacy Rate")<0x0A>plt.ylabel("Epoch Volume")<0x0A><0x0A># Show the plot<0x0A>plt.show()
[35m[1m------------------------------------------------------------------------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mY-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-NAME[39m[22m : nan [35m|[39m [36m[1mY-NAME[39m[22m : nan [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 1.0 [35m|
[35m[1m------------------------------------------------------------------------------------------------------------------------
[35m|[39m JSON to Vega conversion error rate: [31m100.0[39m [31m%[39m [35m|
[35m[1m----------------------------------------------------- EVALUATION -------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mY-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-NAME[39m[22m : nan [35m|[39m [36m[1mY-NAME[39m[22m : nan [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 1.0 [35m|
[35m[1m------------------------------------------------------------------------------------------------------------------------
[32m[1mline|temporal|Year|quantitative|Consumption of fixed capital (as % of GNI)
[31mgrupo_estado_vendas_cadas_por_estado(estado_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_ven
[32m[1mline|temporal|Year|quantitative|Number of meetings(average for affected firms)
[31mcategories_analysis(df, 'Year', 'Number of meetings/meetings for elected firms')
[32m[1mline|temporal|Year|quantitative|Number of days
[31mcategories_list = categories_list.append(categories)<0x0A><0x0A># Create a figure and axes<0x0A>fig, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Create a horizontal bar plot<0x0A>bar_chart = ax.bar(categories_list, aver_year, color='red', alpha=0.8, align="center")<0x0A><0x0A># Add a title and axes labels<0x0A>ax.set_xlabel("Year")<0x0A>ax.set_ylabel("Number of days")<0x0A><0x0A># Add a horizontal line to the axes<0x0A>ax.axhline(y= aver_year, x= aver_year, color='red', linestyle='dotted')<0x0A><0x0A># Add a title and axes labels<0x0A>ax.set_ylabel("Number of days")<0x0A><0x0A># Add a horizontal line to the axes<0x0A>ax.set_xticklabels(categories_list,
[32m[1mline|temporal|Year|quantitative|% of children under 5 taken to a health provider
[31mgrupos_years = ['Year', 'Percentage of children under 5 due to death provided']<0x0A> grupos_years_plot = grupos_years.sort_values('Year',ascending=False)<0x0A><0x0A>fig, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A>ax.set_xticklabels([])<0x0A>ax.set_yticklabels([])<0x0A><0x0A>ax.set_xlabel('Year')<0x0A>ax.set_ylabel('% of children under 5 due to death provided')<0x0A><0x0A>ax.set_yticklabels([])<0x0A><0x0A>ax.set_yticklabels([])<0x0A><0x0A>ax.set_xticklabels([])<0x0A><0x0A>ax.set_yticklabels([])<0x0A><0x0A><0x0A>ax.set_yticklabels([])<0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A>
[32m[1mline|temporal|Year|quantitative|% of firms
[31mgrouped_ranking_ranking = combined_ranking.groupby(['Year','type']).agg({'Year':'sum'}).reset_index()<0x0A>grouped_ranking_ranking.sort_values(by='Year',ascending=False)<0x0A><0x0A>fig = grouped_ranking_ranking.plot(x='Year',y='sum', kind='bar',figsize=(100,20),color='purple',alpha=0.75)<0x0A><0x0A>ax = plt.gca()<0x0A>ax.set_xticklabels(['Year','type'])<0x0A>ax.set_yticklabels(['sum','type'])<0x0A><0x0A>ax.set_xlabel('Year')<0x0A>ax.set_ylabel('% of firms')<0x0A><0x0A>ax.set_yticklabels(['sum','type'])<0x0A><0x0A>ax.set_yticklabels(['sum'
[32m[1mbar|temporal|Year|quantitative|Electric power consumption (kWh per capita)
[31mdrought_trend_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year
[32m[1mbar|temporal|Year|quantitative|Cost of computers, communications and other services (% of commerical service exports)
[31mCropped_bar_chart(tab_cost_communications_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison
[32m[1mbar|nominal|Country|quantitative|Number of tractors
[31mgrupo_country_proportions = grupo_country_proportions.sort_values()<0x0A><0x0A># Plot<0x0A>ax = grupo_country_proportions.plot(kind='bar', figsize=(15,10), color='#1f1f1f')<0x0A>ax.set_xlabel('Country')<0x0A>ax.set_ylabel('Number of Farmers')<0x0A><0x0A># Plot<0x0A>ax.set_ylim(0, None)<0x0A><0x0A># Plot<0x0A>ax.set_xticklabels(['Country'], rotation=90)<0x0A><0x0A># Plot<0x0A>ax.set_yticklabels(['Country'], rotation=0)<0x0A><0x0A># Plot<0x0A>ax.set_xlabel('Country')<0x0A>ax.set_ylabel('Number of Farmers')<0x0A><0x0A># Plot<0x0A>ax.set_ylim(0, None)<0x0A><0x0A># Plot<0x0A>ax.bar( grupo_country_prop
[32m[1mbar|temporal|Year|quantitative|Amount of energy used(kg of oil equivalent per capita)
[31mYear(data)
[32m[1mbar|temporal|Year|quantitative|Number of days
[31mgrupo_estado_dupe = grupo_estado_dupe.sort_values('Year')<0x0A><0x0A># Plot<0x0A>plt.figure(figsize=(10,10))<0x0A>ax = grupo_estado_dupe.plot(kind='bar', x='Year', y='Number of days', rot=90, legend=False, color='tab:blue')<0x0A>ax.set_ylabel('Number of days')<0x0A>ax.set_xlabel('Year')<0x0A><0x0A># Plot<0x0A>plt.tight_layout()<0x0A>plt.savefig('Output/Output/Output_Year.png')<0x0A><0x0A># Plot<0x0A>plt.tight_layout()<0x0A><0x0A># Plot<0x0A>plt.figure(figsize=(10,10))<0x0A>ax = grupo_estado_dupe.plot(kind='bar', x='Year', y='Number of days',
[32m[1mbar|temporal|Year|quantitative|Savings (current US$)
[31mgrupos_years = [years, savings_current_years]<0x0A> grupos_years_years = grupos_years_years.sort_values(ascending=False)<0x0A><0x0A># Plot<0x0A>f, ax = plt.subplots(figsize=(15,20))<0x0A><0x0A># Plot<0x0A>f, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Plot<0x0A>f, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Plot<0x0A>f, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Plot<0x0A>f, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Plot<0x0A>f, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Plot
[32m[1mbar|temporal|Year|quantitative|Land (in sq. km)
[31mdrought_trend_year_2018_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_
[32m[1mbar|nominal|Country|quantitative|Cost (as % of GNI)
[31mdrought_damage_cost_vs_yr(df, df_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean,
[32m[1mbar|nominal|Country|quantitative|Average number of days
[31mdrought_delay_country_average_number_days = drought_delay_country_average_number_days.sort_values('Country',ascending=False)<0x0A> drought_delay_country_average_number_days.plot(kind='bar',figsize=(15,20),color='grey')<0x0A> drought_delay_country_average_number_days.plot(kind='bar',figsize=(15,20),color='grey')<0x0A> drought_delay_country_average_number_days.plot(kind='bar',figsize=(15,20),color='grey')<0x0A> drought_delay_country_average_number_days.plot(kind='bar',figsize=(15,20),color='grey')<0x0A> drought_delay_country_average_number_days.plot(kind='bar',figsize=(15,
[32m[1mbar|nominal|Country|quantitative|Prive value of exports (constant LCU)
[31mdrought_country_price_price.plot(kind='bar',figsize=(15,15),color='grey')<0x0A>plt.xlabel('Country')<0x0A>plt.ylabel('Price Value of exports (constant L21)')<0x0A>plt.tight_layout()<0x0A>plt.savefig('Output/Output/Output/Output/Output_country_price_price.png')
[32m[1mbar|temporal|Year|quantitative|Total reserves (current US$)
[31mdrought_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level
[32m[1mcircle|temporal|Year|quantitative|Unemployed males(% of male labor force ages 15-24)
[31mcategories_gender_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking
[32m[1mcircle|temporal|Year|quantitative|Mean income or consumption per capita(2011 PPP $ per day)
[31mcategories_list = []<0x0A>for category in categories_list:<0x0A>    categories_list.append(categories)<0x0A><0x0A># Create a bar plot of average percentage of female versus male mice using pandas<0x0A>mouse_ranking_plot = cleaned_mouse_ranking_df.groupby(['Mouse ID']).mean().reset_index()<0x0A>mouse_ranking_plot = mouse_ranking_plot.sort_values(by='Mouse ID',ascending=False)<0x0A>mouse_ranking_plot = mouse_ranking_plot.iloc[:,:-1].reset_index()<0x0A>mouse_ranking_plot = mouse_ranking_plot.iloc[:,:-1].sort_values(by='Mouse ID',ascending=False)<0x0A>mouse_ranking_plot = mouse_ranking_plot.iloc[:,:-1].sort_values(by='Mouse ID',ascending=False)
[32m[1mcircle|temporal|Year|quantitative|Savings (current US$)
[31mScarborough(`Year`)<0x0A>(`Savings earned US$)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)<0x0A>(`Sa
[32m[1mcircle|temporal|Year|quantitative|Value added (current Local Currency Unit)
[31mgrupos_total = []<0x0A><0x0A>for year in range(1,13):<0x0A>  grupos_total.append(year)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A>
[35m[1m------------------------------------------------------------------------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mY-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-NAME[39m[22m : nan [35m|[39m [36m[1mY-NAME[39m[22m : nan [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 1.0 [35m|
[35m[1m------------------------------------------------------------------------------------------------------------------------
[36m[1mEpoch :[39m[22m 1 [32m[1m | Loss :[39m[22m 4.939542770385742















100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 20/20 [00:36<00:00,  1.82s/it]
  0%|          | 0/20 [00:00<?, ?it/s]
[35m|[39m JSON to Vega conversion error rate: [31m100.0[39m [31m%[39m [35m|
[35m[1m----------------------------------------------------- EVALUATION -------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mY-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-NAME[39m[22m : nan [35m|[39m [36m[1mY-NAME[39m[22m : nan [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 1.0 [35m|
[35m[1m------------------------------------------------------------------------------------------------------------------------
[32m[1mcircle|quantitative|Mode Age|quantitative|Alcohol Consumption
[31m# Create a scatter plot of Mode Age and Alcohol Consumption<0x0A><0x0A>sns.set(style="ticks", color_codes=True)<0x0A><0x0A># Set up the axes<0x0A>fig, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Add the scatterplot to the plot<0x0A>sns.despine(bottom=True, left=True)<0x0A><0x0A># Set up the axes<0x0A>sns.despine(top=True)<0x0A><0x0A># Set up the axes<0x0A>sns.despine(bottom=True, left=True)<0x0A><0x0A># Add the axis labels<0x0A>sns.despine(top=True)<0x0A><0x0A># Set up the x and y axes<0x0A>sns.despine(left=True)<0x0A><0x0A># Add the axis labels<0x0A>sns.despine(bottom=True)<0x0A><0x0A># Set up the axes<0x0A>sns.de
[32m[1mbar|nominal|Water Usage|quantitative|CO2 Emissions
[31moptions(repr.plot.width=7, repr.plot.height=7)<0x0A>ggplot(data=data, aes(x='Water Usage', y='CO2 Emissions')) +\<0x0A>    geom_bar(stat='identity')
[32m[1mbar|nominal||quantitative|Kurtosis And Skewness Of Annual Corporate Profit Margins
[31mfig = plt.figure(figsize=(10,10))<0x0A>ax = fig.add_subplot(111)<0x0A><0x0A>#ax.spines['top'].set_visible(False)<0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False)<0x0A><0x0A>ax.spines['right'].set_color('black')<0x0A>ax.spines['left'].set_linewidth(1)<0x0A>ax.spines['right'].set_color('black')<0x0A>ax.spines['left'].set_linewidth(1)<0x0A>ax.spines['left'].set_linewidth(1)<0x0A>ax.spines['left'].set_
[32m[1mbar|nominal||quantitative|
[31m# 1. <0x0A># 2. <0x0A># 3. <0x0A># 4. <0x0A># 5. <0x0A># 6. <0x0A># 7. <0x0A># 8. <0x0A># 9. <0x0A># 10. <0x0A># 11. <0x0A># 12. <0x0A># 13. <0x0A># 14. <0x0A># 15. <0x0A># 16. <0x0A># 17. <0x0A># 18. <0x0A># 19. <0x0A># 20. <0x0A># 21. <0x0A># 22. <0x0A># 23. <0x0A># 24. <0x0A># 25. <0x0A># 26. <0x0A># 27. <0x0A># 28. <0x0A># 29. <0x0A># 30.
[32m[1mbar|nominal|Median Household Income Indexed By Regional Inflation Rates|quantitative|Bond Yield
[31m# Plotting the graph<0x0A><0x0A># Compute the correlation coefficient<0x0A>corr = df.corr()<0x0A><0x0A># Generate a mask for the upper triangle<0x0A>mask = np.zeros_like(corr)<0x0A>mask[np.triu_indices_from(mask)] = True<0x0A><0x0A># Set up the matplotlib figure<0x0A>f, ax = plt.subplots(figsize=(10, 10))<0x0A><0x0A># Generate a custom diverging colormap<0x0A>cmap = sns.diverging_palette(220, 10, as_cmap=True)<0x0A><0x0A># Draw the heatmap with the mask and correct aspect ratio<0x0A>sns.heatmap(corr, mask=mask, cmap=cmap, vmax=155, square=True, annot=True, fmt='d', cbar=False, ax=ax)
[32m[1mbar|nominal|Cost|quantitative|Quantile Regression Estimates Of Salary By Experience Level
[31mfig = plt.figure(figsize=(6,6))<0x0A>ax = fig.add_subplot(111)<0x0A><0x0A># Create a bar plot<0x0A>sns.barplot(x='Cost', y='Quantile Regression Estimates Of Salary By Experience Level', data=df, palette='deep')<0x0A><0x0A># Add labels to the plot<0x0A>ax.set_xlabel('Cost')<0x0A>ax.set_ylabel('Quantile Regression Estimates Of Salary By Experience Level')<0x0A><0x0A># Add a title to the plot<0x0A>plt.title('')<0x0A><0x0A># Add a legend<0x0A>plt.legend()<0x0A><0x0A># Show the plot<0x0A>plt.show()
[32m[1mcircle|quantitative|Height|quantitative|
[31mheights.plot(kind='scatter', x='Height', y='Height', figsize=(10,10), color='#1f77b4', s=150)
[32m[1mcircle|quantitative||quantitative|
[31mrows = 1<0x0A>cols = 1<0x0A>fig, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Plot the original data<0x0A>ax.scatter(X, y, s=30)<0x0A><0x0A># Add axis labels<0x0A>ax.set_xlabel('')<0x0A>ax.set_ylabel('Number of users')<0x0A><0x0A># Add axis limits<0x0A>ax.set_xlim(0, 1000)<0x0A><0x0A># Add axis legend<0x0A>ax.legend(loc='upper left')<0x0A><0x0A># Display the figure<0x0A>fig.savefig('figs/fig1.png')
[32m[1mline|temporal|Smoking Rate|quantitative|Simulation Results Of Variable Interest Rates On Bond Prices
[31m## Plotting the graph<0x0A><0x0A>fig, ax = plt.subplots(figsize=(10, 10))<0x0A><0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['top'].set_visible(False)<0x0A><0x0A>ax.spines['right'].set_color('none')<0x0A>ax.spines['bottom'].set_color('none')<0x0A>ax.spines['bottom'].set_color('none')<0x0A><0x0A>ax.spines['left'].set_color('none')<0x0A>ax.spines['left'].set_linewidth(1)<0x0A><0x0A>ax.spines['right'].set_linewidth(1)<0x0A><0x0A>ax.spines['left'].set_linewidth(1)<0x0A><0x0A>ax.spines['left'].set_linewidth(1)<0x0A><0x0A>ax.spines
[32m[1mline|temporal|Adjusted R Squared For Linear Regression Model With Heteroscedasticity|quantitative|CO2 Emissions
[31m# Plot the results of the 10-year regression model<0x0A>ggplot(results_10_year, aes(x=results_10_year, y=results_10_year)) +<0x0A>    geom_line() +<0x0A>    labs(x="Adjusted R Squared For Linear Regression Model With Heteroscedasticity", y="CO2 Emissions") +<0x0A>    scale_y_continuous(limits=c(0,100))
[32m[1mline|temporal|Time|quantitative|
[31mfacet = sns.FacetGrid(data=df, height=8)<0x0A>facet.map(sns.lineplot, "Time", "Time")<0x0A>facet.add_legend()
[32m[1mcircle|quantitative|Predictive Accuracy Of Seasonal Demand Forecasting Models|quantitative|Heterogeneity In Clinical Trial Populations By Gender And Age
[31mheights = ggplot(heights, aes(x=percentage_predictive_accuracy_seasonal_demand_forecasting_models)) +<0x0A>    geom_point() +<0x0A>    labs(x="Predictive Accuracy Of Seasonal Demand Forecasting Models", y="Heterogeneity In Clinical Trial Populations By Generations By Gender And Age") +<0x0A>    theme(axis.text.x = element_text(angle=90, hjust=1))
[32m[1mline|temporal|Distance|quantitative|Probability Density Function Of Age Distribution In Population Survey
[31mfig, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Plot the Distance<0x0A>ax.plot(dist_list, prob_list)<0x0A>ax.set_xlabel('Distance')<0x0A>ax.set_ylabel('Probability Density Density Function OF Age Distribution in Population Survey')<0x0A>ax.set_ylim(0,600)<0x0A><0x0A># Plot the Density<0x0A>ax.set_xlim(dist_list[0], dist_list[-1])<0x0A>ax.set_xlim(dist_list[0]+1, dist_list[-1]+1)<0x0A><0x0A># Plot the Density<0x0A>ax.set_xlim(dist_list[0]+1, dist_list[-1]+1)<0x0A>ax.set_xlim(dist_list[0]+1, dist_list[-1]+1)<0x0A><0x0A># Plot
[32m[1mcircle|quantitative|Growth Rate|quantitative|GDP
[31mscatterplot = sns.regplot(x="Growth Rate", y="GDP", fit_reg=False, ci=None, truncate=True, data=df)<0x0A>scatterplot.set_ylim(0,80)<0x0A>scatterplot.set_xlim(0, 5)<0x0A>scatterplot.set_yticks(np.arange(0, 90, step=5))<0x0A>scatterplot.set_xticklabels(scatterplot.get_xticklabels(), rotation=360)<0x0A>scatterplot.set_yticklabels(scatterplot.get_yticklabels(), rotation=360)<0x0A>scatterplot.set_ylim(0, 80)<0x0A>scatterplot.set_ylim(0, 80)<0x0A>scatterplot.
[32m[1mline|temporal|Mental Health|quantitative|Import Volume
[31mimport matplotlib.pyplot as plt<0x0A>import seaborn as sns<0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A>
[32m[1mcircle|quantitative|Assessment Of Healthcare Utilization Rates By Demographic Groups|quantitative|
[31m%matplotlib inline<0x0A>import matplotlib.pyplot as plt<0x0A>import pandas as pd<0x0A>import numpy as np<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import csv<0x0A>import
[32m[1mbar|nominal||quantitative|Poverty Rate
[31mpoverty_barplot(df, 'Poverty Rate')
[32m[1mline|temporal|Impact Of Temperature Variability On Crop Yield Statistics|quantitative|Detrended Analysis Of Yearly Weather Anomalies In Temperature Data
[31mfig = plt.figure(figsize=(10,10))<0x0A>ax = fig.add_subplot(111)<0x0A><0x0A># Plot the data<0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['top'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A><0x0A># Plot the data<0x0A>ax.spines['bottom'].set_position(('data',0))<0x0A>ax.spines['left'].set_position(('data',0))<0x0A><0x0A># Plot the data<0x0A>ax.spines['left'].set_position(('data',0))<0x0A>ax.spines['left'].set_position(('data',0))<0x0A><0x0A># Plot the data<0x0A>ax.spines['bottom'].
[32m[1mline|temporal||quantitative|
[31mfig, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A>ax.plot(x, y, lw=2, color='#006699', alpha=0.7)<0x0A>ax.plot(x, y_pred, lw=2, color='#006699', alpha=0.7)<0x0A><0x0A>ax.set_xlim(left=1, right=1, bottom=0)<0x0A>ax.set_ylim(bottom=0, top=5, right=5)<0x0A><0x0A>ax.set_xticks(np.arange(1, 1, 1))<0x0A>ax.set_xticklabels(x, fontsize=12)<0x0A><0x0A>ax.set_yticks(np.arange(0, 5, 1))<0x0A>ax.set_yticklabels
[32m[1mcircle|quantitative|Literacy Rate|quantitative|Export Volume
[31m# Plot the graph<0x0A>sns.set(context="notebook", style="ticks", font_scale=1.5)<0x0A><0x0A># Draw scatter plot<0x0A>sns.lmplot(x="Literacy Rate", y="Epoch Volume", data=df,<0x0A>           fit_reg=False, height=6, aspect=1.5,<0x0A>           data=df,<0x0A>           fit_reg=False,<0x0A>           scatter_kws={"s": 100})<0x0A><0x0A># Label axes<0x0A>plt.xlabel("Literacy Rate")<0x0A>plt.ylabel("Epoch Volume")<0x0A><0x0A># Show the plot<0x0A>plt.show()
[35m[1m------------------------------------------------------------------------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mY-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-NAME[39m[22m : nan [35m|[39m [36m[1mY-NAME[39m[22m : nan [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 1.0 [35m|











100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 20/20 [00:24<00:00,  1.23s/it]
[35m|[39m JSON to Vega conversion error rate: [31m100.0[39m [31m%[39m [35m|
[35m[1m----------------------------------------------------- EVALUATION -------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mY-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-NAME[39m[22m : nan [35m|[39m [36m[1mY-NAME[39m[22m : nan [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 1.0 [35m|
[35m[1m------------------------------------------------------------------------------------------------------------------------
[32m[1mline|temporal|Year|quantitative|Consumption of fixed capital (as % of GNI)
[31mpropagation_bar(year_prop, consumption_prop, consumption_prop_year, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant_prop, consumption_prop_constant
[32m[1mline|temporal|Year|quantitative|Number of meetings(average for affected firms)
[31mYear|temporal|Number of meetings/meetings/tax officials in firms of Nicaragua
[32m[1mline|temporal|Year|quantitative|Number of days
[31mYear|temporal|Number of days
[32m[1mline|temporal|Year|quantitative|% of children under 5 taken to a health provider
[31mYear|temporal|% of Children under 5 taken to a health provider
[32m[1mline|temporal|Year|quantitative|% of firms
[31mgrouped_rankings = groupedrankings.sort_values('Year', ascending=False)<0x0A>prop_year = prop_year.groupby(['Year'])<0x0A>prop_year = prop_year.sum(axis=1)<0x0A>prop_year = prop_year.reset_index()<0x0A>prop_year = prop_year.drop(['index', 'Year'], axis=1)<0x0A>prop_year = prop_year.drop(['index', 'Year'], axis=1)<0x0A>prop_year = prop_year.drop(['index', 'Year'], axis=1)<0x0A>prop_year = prop_year.drop(['index', 'Year'], axis=1)<0x0A>prop_year = prop_year.drop(['index', 'Year'], axis=1)<0x0A>prop_year = prop_year.drop(['index', 'Year'], axis=1)<0x0A>prop_year =
[32m[1mbar|temporal|Year|quantitative|Electric power consumption (kWh per capita)
[31mdrought_prop_year_drop_prop(clean_air_quality)
[32m[1mbar|temporal|Year|quantitative|Cost of computers, communications and other services (% of commerical service exports)
[31mYear|temporal|Cost of communications and computers with respect to commercial service exports of Faeroe Islands
[32m[1mbar|nominal|Country|quantitative|Number of tractors
[31mlabeledGraph(country,level=3,margin=20,margin_max=300000,margin_min=0.000000,margin_max=300000,margin_max=300000,margin_min=0.000000,margin_max=300000,margin_max=300000,margin_max=300000,margin_max=300000,margin_max=300000,margin_max=300000,margin_max=300000,margin_max=300000,margin_max=300000,margin_max=300000,margin_max=300000,margin_max=3
[32m[1mbar|temporal|Year|quantitative|Amount of energy used(kg of oil equivalent per capita)
[31mbaggageFavorites(['Year','Amount of energy used by of renewable (per capacity)'])
[32m[1mbar|temporal|Year|quantitative|Number of days
[31mYear|temporal|Number of days
[32m[1mbar|temporal|Year|quantitative|Savings (current US$)
[31mdann2.drop(columns=['Year'], inplace=True)<0x0A>trendline(year_trendline=year_trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline=trendline,trendline
[32m[1mbar|temporal|Year|quantitative|Land (in sq. km)
[31mpropagation_prop(yearly_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_land_
[32m[1mbar|nominal|Country|quantitative|Cost (as % of GNI)
[31mbaggage_level_limit = 20<0x0A><0x0A>fig, ax = plt.subplots(figsize=(20, 20))<0x0A><0x0A>ax.set_facecolor('xkcd:italic')<0x0A><0x0A>ax.bar(categories, cost_level_limit, color='tab:grey', edgecolor='black', linewidth=1)<0x0A><0x0A>ax.set_ylabel('Cost (os % of GNI)')<0x0A>ax.set_xlabel('Country')<0x0A><0x0A>ax.set_ylim(bottom=0)<0x0A><0x0A>ax.set_xticklabels(['Country'], rotation=90)<0x0A><0x0A>ax.set_yticklabels(['Country'], rotation=90)<0x0A><0x0A>ax.set_yticklabels(['Country'], rotation=90)<0x0A><0x0A>ax.set_yticklabels(['Country'], rotation=90)<0x0A><0x0A>ax.set_y
[32m[1mbar|nominal|Country|quantitative|Average number of days
[31mbaggage_country_gender_plot(temperature_code)
[32m[1mbar|nominal|Country|quantitative|Prive value of exports (constant LCU)
[31mdann_country_price_price.plot(kind='bar', figsize=(15, 20), color='#13344a1', alpha=0.75)<0x0A>dn_country_price_price.plot(kind='bar', figsize=(15, 20), color='#13344a1', alpha=0.75)<0x0A>dn_country_price_price.plot(kind='bar', figsize=(15, 20), color='#13344a1', alpha=0.75)<0x0A>dn_country_price_price.plot(kind='bar', figsize=(15, 20), color='#13344a1', alpha=0.75)<0x0A>dn_country_price_price.plot(kind='bar', figsize=(1
[32m[1mbar|temporal|Year|quantitative|Total reserves (current US$)
[31mYear|temporal|Total reserves (current US$)
[32m[1mcircle|temporal|Year|quantitative|Unemployed males(% of male labor force ages 15-24)
[31mgrouped_gender_Male_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female_female
[32m[1mcircle|temporal|Year|quantitative|Mean income or consumption per capita(2011 PPP $ per day)
[31mpropagation_questions(very_few_questions, topic_questions, topic_questions_questions, topic_questions_questions)
[32m[1mcircle|temporal|Year|quantitative|Savings (current US$)
[31mYear|temporal|Savings earned US$
[32m[1mcircle|temporal|Year|quantitative|Value added (current Local Currency Unit)
[31mgrupos = mercador aÃ±olinger otras propagas de mujeres que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen menos que tienen
[35m[1m------------------------------------------------------------------------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mY-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mX-NAME[39m[22m : nan [35m|[39m [36m[1mY-NAME[39m[22m : nan [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 1.0 [35m|
[35m[1m------------------------------------------------------------------------------------------------------------------------
  0%|          | 0/20 [00:00<?, ?it/s]











100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 20/20 [00:29<00:00,  1.49s/it]
 30%|â–ˆâ–ˆâ–ˆ       | 6/20 [00:01<00:04,  3.45it/s]
[35m|[39m JSON to Vega conversion error rate: [31m95.0[39m [31m%[39m [35m|
[35m[1m----------------------------------------------------- EVALUATION -------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0.33 [35m|[39m [36m[1mX-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mY-TYPE[39m[22m : 1.0 [35m|[39m [36m[1mX-NAME[39m[22m : 0.0 [35m|[39m [36m[1mY-NAME[39m[22m : 1.0 [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 0.95 [35m|
[35m[1m------------------------------------------------------------------------------------------------------------------------
[32m[1mcircle|quantitative|Mode Age|quantitative|Alcohol Consumption
[31mheights = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
[32m[1mbar|nominal|Water Usage|quantitative|CO2 Emissions
[31mbar|temporal|Water Usage|co2 Emissions
[32m[1mbar|nominal||quantitative|Kurtosis And Skewness Of Annual Corporate Profit Margins
bar|temporal|count|quantitative|Kurtosis And Skewness Of Annual Corporate Profit Margins
[32m[1mbar|nominal||quantitative|
[31m# 1. <0x0A># 2. <0x0A># 3. <0x0A># 4. <0x0A># 5. <0x0A># 6. <0x0A># 7. <0x0A># 8. <0x0A># 9. <0x0A># 10. <0x0A># 11. <0x0A># 12. <0x0A># 13. <0x0A># 14. <0x0A># 15. <0x0A># 16. <0x0A># 17. <0x0A># 18. <0x0A># 19. <0x0A># 20. <0x0A># 21. <0x0A># 22. <0x0A># 23. <0x0A># 24. <0x0A># 25. <0x0A># 26. <0x0A># 27. <0x0A># 28. <0x0A># 29. <0x0A># 30.
[32m[1mbar|nominal|Median Household Income Indexed By Regional Inflation Rates|quantitative|Bond Yield
[31m# Plotting the graph<0x0A><0x0A># Creating a facetgrid<0x0A>g = sns.FacetGrid(data=df, col='Country', height=10)<0x0A>g.map(plt.hist, 'Bond Yield', bins=20)<0x0A>g.set(ylim=(0, None))<0x0A>g.set(xlim=(0, None))<0x0A><0x0A># Adding a legend<0x0A>g.add_legend()
[32m[1mbar|nominal|Cost|quantitative|Quantile Regression Estimates Of Salary By Experience Level
[31mfig = plt.figure(figsize=(6,6))<0x0A>ax = fig.add_subplot(111)<0x0A><0x0A># Plot bar chart<0x0A>sns.barplot(x='Cost', y='Quantile Regression Estimates Of Salary By Experience Level', data=df)<0x0A><0x0A># Custom limits<0x0A>ax.set_xlim(0, 2000)<0x0A>ax.set_ylim(0, 2000)<0x0A><0x0A># Custom limits<0x0A>ax.set_xticklabels(df.Cost, rotation=90)<0x0A>ax.set_ylabel('Quantile Regression Estimates Of Salary By Experience Level')<0x0A>ax.set_xlabel('Cost')<0x0A><0x0A># Custom limits<0x0A>ax.set_ylim(0, 2000)<0x0A><0x0A># Custom limits<0x0A>ax.set_xlim(0, 2000)<0x0A>ax
[32m[1mcircle|quantitative|Height|quantitative|
[31mheights.plot(kind='scatter', x='Height', y='Height', figsize=(10,10), color='#1f77b4', s=150)
[32m[1mcircle|quantitative||quantitative|
[31mrows = 1<0x0A>cols = 1<0x0A>fig, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Plot the original data<0x0A>ax.scatter(X, y, s=30, c='#0504aa')<0x0A><0x0A># Plot the original data<0x0A>ax.set_xlim(0, 1000)<0x0A><0x0A># Plot the zeros<0x0A>ax.set_ylim(0, 400)<0x0A><0x0A># Add axis labels<0x0A>ax.set_xlabel('')<0x0A>ax.set_ylabel('Number of zeros')<0x0A><0x0A># Add axis legend<0x0A>ax.legend(loc='upper left')<0x0A><0x0A># Show the figure<0x0A>fig.savefig('figs/0504aa.png')
[32m[1mline|temporal|Smoking Rate|quantitative|Simulation Results Of Variable Interest Rates On Bond Prices
[31m## Plotting graph<0x0A><0x0A>fig, ax = plt.subplots(figsize=(10, 10))<0x0A><0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['top'].set_visible(False)<0x0A><0x0A>ax.spines['right'].set_color('none')<0x0A>ax.spines['bottom'].set_color('none')<0x0A><0x0A>ax.spines['left'].set_color('none')<0x0A>ax.spines['bottom'].set_color('none')<0x0A><0x0A>ax.spines['left'].set_linewidth(1)<0x0A><0x0A>ax.spines['right'].set_linewidth(1)<0x0A><0x0A>ax.spines['left'].set_linewidth(1)<0x0A><0x0A>ax.spines['left'].set_linewidth(1)<0x0A><0x0A>ax.spines
[32m[1mline|temporal|Adjusted R Squared For Linear Regression Model With Heteroscedasticity|quantitative|CO2 Emissions
[31m##################<0x0A><0x0A>###############<0x0A><0x0A>#############<0x0A><0x0A>###########<0x0A><0x0A>###########<0x0A><0x0A>#########<0x0A><0x0A>#########<0x0A><0x0A>#########<0x0A><0x0A><0x0A>#########<0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A>
[32m[1mline|temporal|Time|quantitative|
[31mfacet = sns.FacetGrid(data=df, height=8)<0x0A>facet.map(sns.lineplot, "Time", color="#4CB391")<0x0A>facet.set(xlim=(1, 1900))
[32m[1mcircle|quantitative|Predictive Accuracy Of Seasonal Demand Forecasting Models|quantitative|Heterogeneity In Clinical Trial Populations By Gender And Age
[31mheights = df[['Predictive Accuracy Of Seasonal Demand Forecasting Models', 'Heterogeneity In Clinical Trial Populations By Gender And Age']]<0x0A>heights = heights[['Heterogeneity In Clinical Trial Populations By Gender And Age']]<0x0A>heights.plot(kind='scatter', x='Predictive Accuracy Of Seasonal Demand Forecasting Models', y='Heterogeneity In Clinical Trial Populations By Gender And Age', figsize=(10,10), color='#137758', s=200, alpha=0.75)
[32m[1mline|temporal|Distance|quantitative|Probability Density Function Of Age Distribution In Population Survey
[31mbar|distance|Probability Density Function OF Age Distribution in Population Survey
[32m[1mcircle|quantitative|Growth Rate|quantitative|GDP
[31mgraphs = [<0x0A>    "Growth Rate", "GDP", "Population", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate", "Population Rate
[32m[1mline|temporal|Mental Health|quantitative|Import Volume
[31mimport matplotlib.pyplot as plt<0x0A>import seaborn as sns<0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A>
[32m[1mcircle|quantitative|Assessment Of Healthcare Utilization Rates By Demographic Groups|quantitative|
[31mscatter(x=data.index, y=data.values, alpha=0.8)
[32m[1mbar|nominal||quantitative|Poverty Rate
[31mpoverty_barplot(df, 'Poverty Rate')
[32m[1mline|temporal|Impact Of Temperature Variability On Crop Yield Statistics|quantitative|Detrended Analysis Of Yearly Weather Anomalies In Temperature Data
[31mgraph = ggplot(df, aes(x=variable, y=value)) +<0x0A>    geom_line() +<0x0A>    labs(x="Impact Of Temperature Variability On Crop Yield Statistics", y="Dtrended Analysis Of Yearly Weather Temperature Data", fill="variable") +<0x0A>    theme_classic() +<0x0A>    theme(legend.position="bottom") +<0x0A>    facet_wrap("variable")
[32m[1mline|temporal||quantitative|
[31m##########################################################################<0x0A>#############################################################<0x0A><0x0A>################################################################<0x0A><0x0A>####################<0x0A><0x0A>####################<0x0A><0x0A>##################<0x0A><0x0A>##################<0x0A><0x0A>##################<0x0A><0x0A>##################<0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A>
[32m[1mcircle|quantitative|Literacy Rate|quantitative|Export Volume
[31m# Plot the graph<0x0A>sns.set(context="notebook", style="ticks", font_scale=1.5)<0x0A><0x0A># Draw scatter plot<0x0A>sns.lmplot(x="Literacy Rate", y="Epcnt Volume", data=df,<0x0A>           fit_reg=False, height=6, aspect=1.5,<0x0A>           data=df,<0x0A>           fit_reg=False,<0x0A>           fit_reg_kws={"s": 100})<0x0A><0x0A># Label axes<0x0A>plt.xlabel("Literacy Rate")<0x0A>plt.ylabel("Epcnt Volume")<0x0A><0x0A># Show the plot<0x0A>plt.show()
[35m[1m------------------------------------------------------------------------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0.33 [35m|[39m [36m[1mX-TYPE[39m[22m : 0.0 [35m|[39m [36m[1mY-TYPE[39m[22m : 1.0 [35m|[39m [36m[1mX-NAME[39m[22m : 0.0 [35m|[39m [36m[1mY-NAME[39m[22m : 1.0 [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 0.95 [35m|



100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 20/20 [00:08<00:00,  2.47it/s]
[35m|[39m JSON to Vega conversion error rate: [31m0.0[39m [31m%[39m [35m|
[35m[1m----------------------------------------------------- EVALUATION -------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0.38 [35m|[39m [36m[1mX-TYPE[39m[22m : 0.5 [35m|[39m [36m[1mY-TYPE[39m[22m : 1.0 [35m|[39m [36m[1mX-NAME[39m[22m : 1.0 [35m|[39m [36m[1mY-NAME[39m[22m : 0.9 [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 0.0 [35m|
[35m[1m------------------------------------------------------------------------------------------------------------------------
[32m[1mline|temporal|Year|quantitative|Consumption of fixed capital (as % of GNI)
bar|temporal|Year|quantitative|Consumption of fixed capital (as % of GNI)
[32m[1mline|temporal|Year|quantitative|Number of meetings(average for affected firms)
bar|temporal|Year|quantitative|Number of meetings/meetings/tax officials firms
[32m[1mline|temporal|Year|quantitative|Number of days
bar|temporal|Year|quantitative|Number of days
[32m[1mline|temporal|Year|quantitative|% of children under 5 taken to a health provider
bar|temporal|Year|quantitative|% of children under 5 taken to a health provider
[32m[1mline|temporal|Year|quantitative|% of firms
bar|temporal|Year|quantitative|% of firms
[32m[1mbar|temporal|Year|quantitative|Electric power consumption (kWh per capita)
bar|temporal|Year|quantitative|Electric power consumption (kWh per capita)
[32m[1mbar|temporal|Year|quantitative|Cost of computers, communications and other services (% of commerical service exports)
bar|temporal|Year|quantitative|Cost of communications, communications, communications, communications, communications, communications, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers, computers,
[32m[1mbar|nominal|Country|quantitative|Number of tractors
bar|nominal|Country|quantitative|Number of tractors
[32m[1mbar|temporal|Year|quantitative|Amount of energy used(kg of oil equivalent per capita)
bar|temporal|Year|quantitative|Amount of energy used(kg of al equivalent (px equals))
[32m[1mbar|temporal|Year|quantitative|Number of days
bar|temporal|Year|quantitative|Number of days
[32m[1mbar|temporal|Year|quantitative|Savings (current US$)
bar|temporal|Year|quantitative|Savings (current US$)
[32m[1mbar|temporal|Year|quantitative|Land (in sq. km)
bar|temporal|Year|quantitative|Land (in kg km)
[32m[1mbar|nominal|Country|quantitative|Cost (as % of GNI)
bar|nominal|Country|quantitative|Cost (as % of GNI)
[32m[1mbar|nominal|Country|quantitative|Average number of days
bar|nominal|Country|quantitative|Average number of days
[32m[1mbar|nominal|Country|quantitative|Prive value of exports (constant LCU)
bar|nominal|Country|quantitative|Prew value of exports (constant L210)
[32m[1mbar|temporal|Year|quantitative|Total reserves (current US$)
bar|temporal|Year|quantitative|Total reserves (current US$)
[32m[1mcircle|temporal|Year|quantitative|Unemployed males(% of male labor force ages 15-24)
bar|temporal|Year|quantitative|Unemployed male % of male labor force ages 15-24
[32m[1mcircle|temporal|Year|quantitative|Mean income or consumption per capita(2011 PPP $ per day)
circle|temporal|Year|quantitative|Mean income or consumption per capita (Q1 (population=Q4)
[32m[1mcircle|temporal|Year|quantitative|Savings (current US$)
bar|temporal|Year|quantitative|Savings (current US$)
[32m[1mcircle|temporal|Year|quantitative|Value added (current Local Currency Unit)
bar|temporal|Year|quantitative|Value added (current Local Currency Unit)
[35m[1m------------------------------------------------------------------------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0.38 [35m|[39m [36m[1mX-TYPE[39m[22m : 0.5 [35m|[39m [36m[1mY-TYPE[39m[22m : 1.0 [35m|[39m [36m[1mX-NAME[39m[22m : 1.0 [35m|[39m [36m[1mY-NAME[39m[22m : 0.9 [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 0.0 [35m|
[35m[1m------------------------------------------------------------------------------------------------------------------------
 15%|â–ˆâ–Œ        | 3/20 [00:01<00:06,  2.48it/s]












100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 20/20 [00:27<00:00,  1.39s/it]
