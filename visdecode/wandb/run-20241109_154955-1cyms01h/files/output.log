
[36m[1mEpoch :[39m[22m 0 [32m[1m | Loss :[39m[22m 5.4127116203308105


















100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 20/20 [00:45<00:00,  2.28s/it]
/mnt/disk2/msinnona/miniconda3/envs/martin/lib/python3.12/site-packages/numpy/core/fromnumeric.py:3504: RuntimeWarning: Mean of empty slice.
  return _methods._mean(a, axis=axis, dtype=dtype,
/mnt/disk2/msinnona/miniconda3/envs/martin/lib/python3.12/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide
  ret = ret.dtype.type(ret / rcount)
  0%|          | 0/20 [00:00<?, ?it/s]
[35m|[39m JSON to Vega conversion error rate: [31m100.0[39m [31m%[39m [35m|
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
[35m[1m----------------------------------------------------- EVALUATION -------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0 [35m|[39m [36m[1mX-TYPE[39m[22m : 0 [35m|[39m [36m[1mY-TYPE[39m[22m : 0 [35m|[39m [36m[1mX-NAME[39m[22m : nan [35m|[39m [36m[1mY-NAME[39m[22m : nan [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 1.0 [35m|
[35m[1m------------------------------------------------------------------------------------------------------------------------
[32m[1mcircle|quantitative|Mode Age|quantitative|Alcohol Consumption
[31m# Plot the scatterplot for Mode Age and Alcohol Consumption<0x0A><0x0A>sns.set(style="ticks", color_codes=True)<0x0A><0x0A>g = sns.lmplot(x="Mode Age", y="Alcohol Consumption", data=df,<0x0A>           fit_reg=False, height=7, aspect=1.5)<0x0A><0x0A>g.set(xlim=(0, None), ylim=(0, None))<0x0A><0x0A>g.set(xlabel='Mode Age', ylabel='Alcohol Consumption')<0x0A>g.set(yticks=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
[32m[1mbar|nominal|Water Usage|quantitative|CO2 Emissions
[31mg = sns.catplot(x="Water Usage", y="CO2 Emissions", data=df, kind="bar", height=8, aspect=1.5)<0x0A>g.despine(left=True)<0x0A>g.set_axis_labels("Water Usage", "CO2 Emissions")<0x0A>g.set_xticklabels(rotation=90)<0x0A>g.set_ylabels("")<0x0A>plt.show()
[32m[1mbar|nominal|Consumer Price Index|quantitative|Kurtosis And Skewness Of Annual Corporate Profit Margins
[31m# Create a bar plot of Consumer Price Index<0x0A>sns.set(context="notebook", style="ticks", color_codes=True)<0x0A><0x0A># Create a bar plot of Kurtosis And Skewness Of Annual Corporate Profit Margins<0x0A>sns.set(context="notebook", style="ticks", color_codes=True)<0x0A><0x0A># Create a bar plot of Consumer Price Index<0x0A>sns.set(context="notebook", style="ticks", color_codes=True)<0x0A><0x0A># Create a bar plot of Consumer Price Index<0x0A>sns.set(context="notebook", style="ticks", color_codes=True)<0x0A><0x0A># Create a bar plot of Kurtosis And Skewness Of Annual Corporate Profit Margins<0x0A>sns.set(context="notebook", style="ticks", color_codes=True)<0x0A><0x0A># Create a bar plot of Consumer Price Index
[32m[1mbar|nominal|Range|quantitative|Participation Rate
[31moptions(repr.plot.width=7, repr.plot.height=7)<0x0A>ggplot(data=df, aes(x=Range, y=ParticipationRate)) +<0x0A>    geom_bar(stat="identity") +<0x0A>    scale_y_continuous(limits=c(0,230)) +<0x0A>    labs(x="Range", y="Participation Rate") +<0x0A>    theme_classic() +<0x0A>    theme(<0x0A>        axis.text.x = element_text(angle=90, hjust=1, size=15),<0x0A>        axis.ticks.x = element_text(angle=90, hjust=1, size=15),<0x0A>        axis.ticks.y = element_text(angle=90, hjust=1, size=15),<0x0A>        axis.ticks.
[32m[1mbar|nominal|Median Household Income Indexed By Regional Inflation Rates|quantitative|Bond Yield
[31m# Plotting the graph<0x0A><0x0A>sns.set(style="ticks")<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph<0x0A><0x0A># Plotting the graph
[32m[1mbar|nominal|Cost|quantitative|Quantile Regression Estimates Of Salary By Experience Level
[31mfig = plt.figure(figsize=(6,6))<0x0A>ax = fig.add_subplot(111)<0x0A><0x0A># Create a bar plot<0x0A>sns.barplot(x='Cost', y='Quantile Regression Estimates Of Salary By Experience Level', data=df_salary_exp)<0x0A><0x0A># Add a title and axis labels<0x0A>ax.set_ylabel('Quantile Regression Estimates Of Salary By Experience Level')<0x0A>ax.set_xlabel('Cost')<0x0A><0x0A># Add a title and axis labels<0x0A>ax.set_ylabel('Quantile Regression Estimates Of Salary By Experience Level')<0x0A><0x0A># Add a legend<0x0A>ax.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)<0x0A><0x0A># Display the plot<0x0A>plt.show()
[32m[1mcircle|quantitative|Height|quantitative|Speed
[31mheights = sns.lmplot(x='Height', y='Speed', data=df, fit_reg=False, height=5, aspect=1, scatter_kws={'s': 50})
[32m[1mcircle|quantitative|Log Transformed Peak Demand During Holiday Seasons At Retail Stores|quantitative|Import Volume
[31m# Plot<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>#<0x0A>
[32m[1mline|temporal|Smoking Rate|quantitative|Simulation Results Of Variable Interest Rates On Bond Prices
[31m## Plotting the graph<0x0A><0x0A>fig, ax = plt.subplots(figsize=(10, 10))<0x0A><0x0A>ax.plot(smoking_rates, results_bond_prices)<0x0A>ax.set_xlabel('Smoking Rate')<0x0A>ax.set_ylabel('Simulation Results Of Variable Interest Rates On Bond Prices')<0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['top'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False)<0x0A><0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A>ax.spines['bottom'].set
[32m[1mline|temporal|Adjusted R Squared For Linear Regression Model With Heteroscedasticity|quantitative|CO2 Emissions
[31m# Plot the Co2 emissions<0x0A><0x0A>sns.set(style="ticks")<0x0A><0x0A># Compute the co2 emissions<0x0A>co2_co2 = pd.DataFrame(<0x0A>    [<0x0A>        (<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>        ((<0x0A>
[32m[1mline|temporal|Time|quantitative|Probability Density Function for Reaction Time (seconds)
[31m# Plot Time vs Probability Density Function for Reaction Time (seconds)<0x0A><0x0A>sns.set(context="talk", style="ticks", font_scale=1.5)<0x0A><0x0A>sns.relplot(x="Time", y="Probability Density Density Function for Reaction Time (seconds)", data=time_probability_density_function_df, kind="line", height=8, aspect=1.5)<0x0A><0x0A># Set the style of the plot<0x0A>sns.despine()<0x0A>plt.tight_layout()<0x0A>plt.savefig("time_probability_density_density_function_time_seconds.png")
[32m[1mcircle|quantitative|Predictive Accuracy Of Seasonal Demand Forecasting Models|quantitative|Heterogeneity In Clinical Trial Populations By Gender And Age
[31m# Create a scatter plot<0x0A>ggplot(aes(x=variable, y=variable, colour=variable)) +<0x0A>    geom_point() +<0x0A>    labs(x="Predictive Accuracy Of Seasonal Demand Forecasting Models", y="Heterogeneity In Clinical Trial Populations By Generations By Gender And Age") +<0x0A>    scale_x_date() +<0x0A>    scale_y_jitter() +<0x0A>    theme_minimal()
[32m[1mline|temporal|Distance|quantitative|Probability Density Function Of Age Distribution In Population Survey
[31m# Plot the Distance vs Probability Density Function OYAg Distribution in Population Survey<0x0A><0x0A>sns.set(context="talk", style="ticks", font_scale=1.5)<0x0A><0x0A>fig, ax = plt.subplots(figsize=(10, 10))<0x0A><0x0A>ax.spines['top'].set_visible(False)<0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False)<0x0A><0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False
[32m[1mcircle|quantitative|Growth Rate|quantitative|GDP
[31m# Plot the scatter plot<0x0A><0x0A># Set up the matplotlib figure<0x0A>f, ax = plt.subplots(figsize=(10, 10))<0x0A><0x0A># Generate a scatter plot of total GDP vs Growth Rate<0x0A>scatter_plot = scatter_plot.plot(x='Growth Rate', y='GDP', kind='scatter', ax=ax, color='#1f77b4', s=75)<0x0A><0x0A># Set up the x-axis label<0x0A>ax.set_xlabel('Growth Rate')<0x0A>ax.set_ylabel('GDP')<0x0A><0x0A># Set up the legend<0x0A>ax.legend(handles=[scatter_plot])<0x0A><0x0A># Set up the y-axis<0x0A>ax.set_ylim(0, 80)<0x0A><0x0A># Set up the legend<0x0A>ax.legend(
[32m[1mline|temporal|Mental Health|quantitative|Import Volume
[31mimport matplotlib.pyplot as plt<0x0A>import seaborn as sns<0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A>
[32m[1mcircle|quantitative|Assessment Of Healthcare Utilization Rates By Demographic Groups|quantitative|Relative Risk Assessment Of Health Outcomes In Demographic Studies
[31m# Plot<0x0A>options(repr.plot.height=5)<0x0A>ggplot(data=df, aes(x=Relatives, y=Relatives, colour=Relatives)) +<0x0A>    geom_point() +<0x0A>    labs(x="Assessment Of Healthcare Utilization Rates By Demographic Groups", y="Relatives Risk Assessment Of Health Oucomes In Demographic Studies") +<0x0A>    theme(axis.text.x = element_text(angle=90, hjust=1))
[32m[1mbar|nominal|Mortality Rate|quantitative|Poverty Rate
[31mpoverty_table.plot(kind='bar', figsize=(6,6), fontsize=12, rot=0)<0x0A>plt.ylim(0,3000)<0x0A>plt.xlabel('Mortality Rate')<0x0A>plt.ylabel('Poverty Rate')<0x0A>plt.grid(linestyle='--', linewidth=0.5)<0x0A>plt.show()
[32m[1mline|temporal|Impact Of Temperature Variability On Crop Yield Statistics|quantitative|Detrended Analysis Of Yearly Weather Anomalies In Temperature Data
[31mfig = plt.figure(figsize=(10,10))<0x0A>ax = fig.add_subplot(111)<0x0A><0x0A># Plot the data<0x0A>ax.plot(x, y, lw=2, color='#003366', alpha=0.7)<0x0A>ax.set_xlabel('Impact Of Temperature Variability On Crop Yield Statistics')<0x0A>ax.set_ylabel('Dtrended Analysis Of Yearly Weather In Normalies In Temperature Data')<0x0A>ax.set_ylim(0, 6000)<0x0A><0x0A># Plot the data<0x0A>ax.spines['right'].set_visible(False)<0x0A>ax.spines['top'].set_visible(False)<0x0A>ax.spines['bottom'].set_visible(False)<0x0A>ax.spines['left'].set_visible(False)<0x0A>ax.spin
[32m[1mline|temporal|Manufacturing Output|quantitative|Fuel Consumption
[31mfig, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A>ax.plot(df['Manufacturing Output'],df['Fuel Consumption'],linewidth=0.5)<0x0A>ax.set_xlabel('Manufacturing Output')<0x0A>ax.set_ylabel('Fuel Consumption')<0x0A>ax.set_ylim(0,500000000)<0x0A>ax.set_xlim(1825,1840)<0x0A>ax.set_ylim(0,500000000)<0x0A><0x0A>ax.set_xticks(np.arange(1825,1840,1))<0x0A>ax.set_xticklabels(df['Manufacturing Output'].unique())<0x0A>ax.set_yticklabels(df['Manufacturing Output'].
[32m[1mcircle|quantitative|Literacy Rate|quantitative|Export Volume
[31m# Plot the graph<0x0A>sns.set(context="notebook", style="ticks", font_scale=1.5)<0x0A><0x0A># Draw scatter plot<0x0A>sns.lmplot(x="Literacy Rate", y="Epoch Volume", data=df,<0x0A>           fit_reg=False, height=7, aspect=1.5,<0x0A>           data=df,<0x0A>           fit_reg=False,<0x0A>           size=8,<0x0A>           scatter_kws={"s": 100})<0x0A><0x0A># Label axes<0x0A>plt.xlabel("Literacy Rate")<0x0A>plt.ylabel("Epoch Volume")<0x0A><0x0A># Show the plot<0x0A>plt.show()
[35m[1m------------------------------------------------------------------------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0 [35m|[39m [36m[1mX-TYPE[39m[22m : 0 [35m|[39m [36m[1mY-TYPE[39m[22m : 0 [35m|[39m [36m[1mX-NAME[39m[22m : nan [35m|[39m [36m[1mY-NAME[39m[22m : nan [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 1.0 [35m|

















 95%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–Œ| 19/20 [00:45<00:02,  2.75s/it]
[35m|[39m JSON to Vega conversion error rate: [31m100.0[39m [31m%[39m [35m|
[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]
[35m[1m----------------------------------------------------- EVALUATION -------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0 [35m|[39m [36m[1mX-TYPE[39m[22m : 0 [35m|[39m [36m[1mY-TYPE[39m[22m : 0 [35m|[39m [36m[1mX-NAME[39m[22m : nan [35m|[39m [36m[1mY-NAME[39m[22m : nan [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 1.0 [35m|
[35m[1m------------------------------------------------------------------------------------------------------------------------
[32m[1mline|temporal|Year|quantitative|Consumption of fixed capital (as % of GNI)
[31mgrupo_estado_vendas_cadas_por_estado(estado_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_vendas_cadas_por_estado(vendas_ven
[32m[1mline|temporal|Year|quantitative|Number of meetings(average for affected firms)
[31mcategories_analysis(df, 'Year', 'Number of meetings/meetings for elected firms')
[32m[1mline|temporal|Year|quantitative|Number of days
[31mcategories_list = categories_list.append(categories)<0x0A><0x0A># Create a figure and axes<0x0A>fig, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Create a horizontal bar plot<0x0A>bar_chart = ax.bar(categories_list, aver_year, color='red', alpha=0.8, align="center")<0x0A><0x0A># Add a title and axes labels<0x0A>ax.set_xlabel("Year")<0x0A>ax.set_ylabel("Number of days")<0x0A><0x0A># Add a horizontal line to the axes<0x0A>ax.axhline(y= aver_year, x= aver_year, color='red', linestyle='dotted')<0x0A><0x0A># Add a title and axes labels<0x0A>ax.set_ylabel("Number of days")<0x0A><0x0A># Add a horizontal line to the axes<0x0A>ax.set_xticklabels(categories_list,
[32m[1mline|temporal|Year|quantitative|% of children under 5 taken to a health provider
[31mgrupos_years = ['Year', 'Percentage of children under 5 due to death provided']<0x0A> grupos_years_plot = grupos_years.sort_values('Year',ascending=False)<0x0A><0x0A>fig, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A>ax.set_xticklabels([])<0x0A>ax.set_yticklabels([])<0x0A><0x0A>ax.set_xlabel('Year')<0x0A>ax.set_ylabel('% of children under 5 due to death provided')<0x0A><0x0A>ax.set_yticklabels([])<0x0A><0x0A>ax.set_yticklabels([])<0x0A><0x0A>ax.set_xticklabels([])<0x0A><0x0A>ax.set_yticklabels([])<0x0A><0x0A><0x0A>ax.set_yticklabels([])<0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A><0x0A>
[32m[1mline|temporal|Year|quantitative|% of firms
[31mgrouped_ranking_ranking = combined_ranking.groupby(['Year','type']).agg({'Year':'sum'}).reset_index()<0x0A>grouped_ranking_ranking.sort_values(by='Year',ascending=False)<0x0A><0x0A>fig = grouped_ranking_ranking.plot(x='Year',y='sum', kind='bar',figsize=(100,20),color='purple',alpha=0.75)<0x0A><0x0A>ax = plt.gca()<0x0A>ax.set_xticklabels(['Year','type'])<0x0A>ax.set_yticklabels(['sum','type'])<0x0A><0x0A>ax.set_xlabel('Year')<0x0A>ax.set_ylabel('% of firms')<0x0A><0x0A>ax.set_yticklabels(['sum','type'])<0x0A><0x0A>ax.set_yticklabels(['sum'
[32m[1mbar|temporal|Year|quantitative|Electric power consumption (kWh per capita)
[31mdrought_trend_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year_trend_year
[32m[1mbar|temporal|Year|quantitative|Cost of computers, communications and other services (% of commerical service exports)
[31mCropped_bar_chart(tab_cost_communications_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison_comparison
[32m[1mbar|nominal|Country|quantitative|Number of tractors
[31mgrupo_country_proportions = grupo_country_proportions.sort_values()<0x0A><0x0A># Plot<0x0A>ax = grupo_country_proportions.plot(kind='bar', figsize=(15,10), color='#1f1f1f')<0x0A>ax.set_xlabel('Country')<0x0A>ax.set_ylabel('Number of Farmers')<0x0A><0x0A># Plot<0x0A>ax.set_ylim(0, None)<0x0A><0x0A># Plot<0x0A>ax.set_xticklabels(['Country'], rotation=90)<0x0A><0x0A># Plot<0x0A>ax.set_yticklabels(['Country'], rotation=0)<0x0A><0x0A># Plot<0x0A>ax.set_xlabel('Country')<0x0A>ax.set_ylabel('Number of Farmers')<0x0A><0x0A># Plot<0x0A>ax.set_ylim(0, None)<0x0A><0x0A># Plot<0x0A>ax.bar( grupo_country_prop
[32m[1mbar|temporal|Year|quantitative|Amount of energy used(kg of oil equivalent per capita)
[31mYear(data)
[32m[1mbar|temporal|Year|quantitative|Number of days
[31mgrupo_estado_dupe = grupo_estado_dupe.sort_values('Year')<0x0A><0x0A># Plot<0x0A>plt.figure(figsize=(10,10))<0x0A>ax = grupo_estado_dupe.plot(kind='bar', x='Year', y='Number of days', rot=90, legend=False, color='tab:blue')<0x0A>ax.set_ylabel('Number of days')<0x0A>ax.set_xlabel('Year')<0x0A><0x0A># Plot<0x0A>plt.tight_layout()<0x0A>plt.savefig('Output/Output/Output_Year.png')<0x0A><0x0A># Plot<0x0A>plt.tight_layout()<0x0A><0x0A># Plot<0x0A>plt.figure(figsize=(10,10))<0x0A>ax = grupo_estado_dupe.plot(kind='bar', x='Year', y='Number of days',
[32m[1mbar|temporal|Year|quantitative|Savings (current US$)
[31mgrupos_years = [years, savings_current_years]<0x0A> grupos_years_years = grupos_years_years.sort_values(ascending=False)<0x0A><0x0A># Plot<0x0A>f, ax = plt.subplots(figsize=(15,20))<0x0A><0x0A># Plot<0x0A>f, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Plot<0x0A>f, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Plot<0x0A>f, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Plot<0x0A>f, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Plot<0x0A>f, ax = plt.subplots(figsize=(10,10))<0x0A><0x0A># Plot
[32m[1mbar|temporal|Year|quantitative|Land (in sq. km)
[31mdrought_trend_year_2018_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_
[32m[1mbar|nominal|Country|quantitative|Cost (as % of GNI)
[31mdrought_damage_cost_vs_yr(df, df_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean, df_clean_clean,
[32m[1mbar|nominal|Country|quantitative|Average number of days
[31mdrought_delay_country_average_number_days = drought_delay_country_average_number_days.sort_values('Country',ascending=False)<0x0A> drought_delay_country_average_number_days.plot(kind='bar',figsize=(15,20),color='grey')<0x0A> drought_delay_country_average_number_days.plot(kind='bar',figsize=(15,20),color='grey')<0x0A> drought_delay_country_average_number_days.plot(kind='bar',figsize=(15,20),color='grey')<0x0A> drought_delay_country_average_number_days.plot(kind='bar',figsize=(15,20),color='grey')<0x0A> drought_delay_country_average_number_days.plot(kind='bar',figsize=(15,
[32m[1mbar|nominal|Country|quantitative|Prive value of exports (constant LCU)
[31mdrought_country_price_price.plot(kind='bar',figsize=(15,15),color='grey')<0x0A>plt.xlabel('Country')<0x0A>plt.ylabel('Price Value of exports (constant L21)')<0x0A>plt.tight_layout()<0x0A>plt.savefig('Output/Output/Output/Output/Output_country_price_price.png')
[32m[1mbar|temporal|Year|quantitative|Total reserves (current US$)
[31mdrought_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level_level
[32m[1mcircle|temporal|Year|quantitative|Unemployed males(% of male labor force ages 15-24)
[31mcategories_gender_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking_ranking
[32m[1mcircle|temporal|Year|quantitative|Mean income or consumption per capita(2011 PPP $ per day)
[31mcategories_list = []<0x0A>for category in categories_list:<0x0A>    categories_list.append(categories)<0x0A><0x0A># Create a bar plot of average percentage of female versus male mice using pandas<0x0A>mouse_ranking_plot = cleaned_mouse_ranking_df.groupby(['Mouse ID']).mean().reset_index()<0x0A>mouse_ranking_plot = mouse_ranking_plot.sort_values(by='Mouse ID',ascending=False)<0x0A>mouse_ranking_plot = mouse_ranking_plot.iloc[:,:-1].reset_index()<0x0A>mouse_ranking_plot = mouse_ranking_plot.iloc[:,:-1].sort_values(by='Mouse ID',ascending=False)<0x0A>mouse_ranking_plot = mouse_ranking_plot.iloc[:,:-1].sort_values(by='Mouse ID',ascending=False)
[32m[1mcircle|temporal|Year|quantitative|Savings (current US$)
[31mScarborough(`Year`)<0x0A>(`Savings earned US$)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)<0x0A>(`Savings earned (Years)`)<0x0A>(`Savings earned (Years)<0x0A>(`Sa
[32m[1mcircle|temporal|Year|quantitative|Value added (current Local Currency Unit)
[31mgrupos_total = []<0x0A><0x0A>for year in range(1,13):<0x0A>  grupos_total.append(year)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A> grupos_total.append(local_comms_total_comms)<0x0A><0x0A>
[35m[1m------------------------------------------------------------------------------------------------------------------------
[35m|[39m [36m[1mMARK-TYPE[39m[22m : 0 [35m|[39m [36m[1mX-TYPE[39m[22m : 0 [35m|[39m [36m[1mY-TYPE[39m[22m : 0 [35m|[39m [36m[1mX-NAME[39m[22m : nan [35m|[39m [36m[1mY-NAME[39m[22m : nan [35m|[39m [36m[1mSTRUCT-ERROR[39m[22m : 1.0 [35m|

100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 20/20 [00:48<00:00,  2.42s/it]
[36m[1mEpoch :[39m[22m 1 [32m[1m | Loss :[39m[22m 4.939542770385742
[36m[1mEpoch :[39m[22m 2 [32m[1m | Loss :[39m[22m 4.589889049530029
[36m[1mEpoch :[39m[22m 3 [32m[1m | Loss :[39m[22m 4.305851936340332
